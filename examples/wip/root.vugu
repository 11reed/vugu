<div id="root" :class="data.Class">
    <h2>Hey party people!</h2>
    <ul>
        <li vg-for="data.Items" vg-html="value" @click="comp.HandleClick(event, value)"></li>
    </ul>
    <button @click="comp.HandleLoadClick(event, data, 1)">Load JSON 1</button>
    <button @click="comp.HandleLoadClick(event, data, 2)">Load JSON 2</button>
    <button @click="comp.HandleLoadClick(event, data, 3)">Load JSON 3</button>
    <button @click="comp.HandleLoadClick(event, data, 5)">Load JSON 5</button>
</div>

<style>
#root {
    border: 2px solid green;
}
</style>

<script type="application/x-go">
import "log"
import "net/http"
import "encoding/json"

type RootData struct {
    Class string
    Items []string
}

func (ct *Root) NewData(props vugu.Props) (interface{}, error) {
    return &RootData{
        Class: "some class here",
        Items: []string{"item1", "item2", "item3"},
    }, nil
}

func (comp *Root) HandleLoadClick(event *vugu.DOMEvent, data *RootData, n int) {

    println("In HandleLoadClick()")

    go func() {

        // fetch somehting
        resp, err := http.Get(fmt.Sprintf("/api/sample?n=%d", n))
        if err != nil { log.Print(err); return }
        defer resp.Body.Close()

        // parse and upate data, with a lock
        event.EventEnv().Lock()
        defer event.EventEnv().UnlockRender()

        json.NewDecoder(resp.Body).Decode(&data.Items)

    }()

}

func (comp *Root) HandleClick(event *vugu.DOMEvent, itemText string) {
    log.Printf("HandleClick got %q", itemText)
}

</script>
